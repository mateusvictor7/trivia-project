{"ast":null,"code":"var _jsxFileName = \"/home/mateus/Reposit\\xF3rios/trivia-project/src/Components/GameQuestions.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router';\nimport { setQuestions } from '../Actions/setQuestions';\nimport '../Styles/GameQuestionsStyle.css';\n\nclass GameQuestions extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionNumber: 0,\n      answerClicked: false,\n      time: 30,\n      userPoints: 0,\n      assertions: 0,\n      redirect: false\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleTime = this.handleTime.bind(this);\n    this.handleNext = this.handleNext.bind(this);\n    this.stopInterval = this.stopInterval.bind(this);\n    this.createStore = this.createStore.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleTime();\n    this.createStore();\n  }\n\n  componentDidUpdate() {\n    this.stopInterval();\n  }\n\n  setAnswer(incorrects, correct) {\n    const _this$state = this.state,\n          answerClicked = _this$state.answerClicked,\n          time = _this$state.time;\n    const incorrectsElements = incorrects.map((incorrect, index) => React.createElement(\"button\", {\n      type: \"button\",\n      key: incorrect,\n      \"data-testid\": `wrong-answer-${index}`,\n      name: \"incorrectAnswer\",\n      className: answerClicked ? 'incorrect' : null,\n      onClick: this.handleClick,\n      disabled: time < 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, this.decode(incorrect)));\n    const correctElement = React.createElement(\"button\", {\n      type: \"button\",\n      \"data-testid\": \"correct-answer\",\n      key: correct,\n      name: \"correctAnswer\",\n      className: answerClicked ? 'correct' : null,\n      onClick: this.handleClick,\n      disabled: time < 1,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, this.decode(correct));\n    incorrectsElements.splice(2, 0, correctElement);\n    return incorrectsElements;\n  }\n\n  decode(text) {\n    const txt = document.createElement('textarea');\n    txt.innerHTML = text;\n    return txt.value;\n  }\n\n  stopInterval(answered) {\n    const time = this.state.time;\n\n    if (time < 1 || answered) {\n      clearInterval(this.time);\n    }\n  }\n\n  createStore() {\n    const _this$props = this.props,\n          name = _this$props.name,\n          gravatarEmail = _this$props.gravatarEmail;\n    const _this$state2 = this.state,\n          userPoints = _this$state2.userPoints,\n          assertions = _this$state2.assertions;\n    const state = {\n      player: {\n        name,\n        assertions,\n        score: userPoints,\n        gravatarEmail\n      }\n    };\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  handleClick({\n    target\n  }) {\n    const questions = this.props.questions;\n    const _this$state3 = this.state,\n          questionNumber = _this$state3.questionNumber,\n          time = _this$state3.time,\n          userPoints = _this$state3.userPoints;\n    let difficulty;\n    const hard = 3;\n    let points = userPoints;\n    const assert = 10;\n\n    switch (questions[questionNumber].difficulty) {\n      case 'hard':\n        difficulty = hard;\n        break;\n\n      case 'medium':\n        difficulty = 2;\n        break;\n\n      case 'easy':\n        difficulty = 1;\n        break;\n\n      default:\n        difficulty = 0;\n    }\n\n    if (target.name === 'correctAnswer') {\n      points += assert + time * difficulty;\n      this.setState(previous => ({\n        assertions: previous.assertions + 1,\n        userPoints: points\n      }), () => this.createStore());\n    }\n\n    this.setState({\n      answerClicked: true\n    });\n    this.stopInterval(true);\n  }\n\n  handleTime() {\n    const magicNumber = 990;\n    this.time = setInterval(() => {\n      this.setState(prev => ({\n        time: prev.time - 1\n      }));\n    }, magicNumber);\n  }\n\n  handleNext() {\n    const questions = this.props.questions;\n    const questionNumber = this.state.questionNumber;\n    const magicNumber = 5;\n\n    if (questionNumber === questions.length - 1) {\n      this.setState({\n        redirect: true\n      });\n      return;\n    }\n\n    if (questionNumber < magicNumber) {\n      this.setState({\n        questionNumber: questionNumber + 1,\n        time: 30,\n        answerClicked: false\n      }, () => this.handleTime());\n    }\n  }\n\n  render() {\n    const _this$props2 = this.props,\n          fetchQuestions = _this$props2.fetchQuestions,\n          token = _this$props2.token,\n          loading = _this$props2.loading,\n          questions = _this$props2.questions;\n    const _this$state4 = this.state,\n          questionNumber = _this$state4.questionNumber,\n          time = _this$state4.time,\n          answerClicked = _this$state4.answerClicked,\n          redirect = _this$state4.redirect;\n\n    if (loading) {\n      fetchQuestions(token);\n      return React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, \"Loading\");\n    }\n\n    if (redirect) return React.createElement(Redirect, {\n      to: \"/feedback\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    });\n    this.createStore();\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"Pergunta\"), React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Tempo:\", time), React.createElement(\"p\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"Categoria:\", questions && this.decode(questions[questionNumber].category)), React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, questions && this.decode(questions[questionNumber].question)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, questions && this.setAnswer(questions[questionNumber].incorrect_answers, questions[questionNumber].correct_answer)), answerClicked && React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.handleNext,\n      \"data-testid\": \"btn-next\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"Proxima\"));\n  }\n\n}\n\nconst mapDispatchToProps = dispatch => ({\n  fetchQuestions: token => dispatch(setQuestions(token))\n});\n\nconst mapStateToProps = state => ({\n  token: state.token.obj.token,\n  loading: state.questions.loading,\n  questions: state.questions.questions,\n  name: state.setUser.name,\n  gravatarEmail: state.setUser.email\n});\n\nGameQuestions.propTypes = {\n  fetchQuestions: PropTypes.func,\n  token: PropTypes.string,\n  loading: PropTypes.bool,\n  questions: PropTypes.arrayOf({})\n}.isRequired;\nexport default connect(mapStateToProps, mapDispatchToProps)(GameQuestions);","map":{"version":3,"sources":["/home/mateus/Reposit√≥rios/trivia-project/src/Components/GameQuestions.jsx"],"names":["React","Component","connect","PropTypes","Redirect","setQuestions","GameQuestions","constructor","props","state","questionNumber","answerClicked","time","userPoints","assertions","redirect","handleClick","bind","handleTime","handleNext","stopInterval","createStore","componentDidMount","componentDidUpdate","setAnswer","incorrects","correct","incorrectsElements","map","incorrect","index","decode","correctElement","splice","text","txt","document","createElement","innerHTML","value","answered","clearInterval","name","gravatarEmail","player","score","localStorage","setItem","JSON","stringify","target","questions","difficulty","hard","points","assert","setState","previous","magicNumber","setInterval","prev","length","render","fetchQuestions","token","loading","category","question","incorrect_answers","correct_answer","mapDispatchToProps","dispatch","mapStateToProps","obj","setUser","email","propTypes","func","string","bool","arrayOf","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router';\nimport { setQuestions } from '../Actions/setQuestions';\nimport '../Styles/GameQuestionsStyle.css';\n\nclass GameQuestions extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questionNumber: 0,\n      answerClicked: false,\n      time: 30,\n      userPoints: 0,\n      assertions: 0,\n      redirect: false,\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleTime = this.handleTime.bind(this);\n    this.handleNext = this.handleNext.bind(this);\n    this.stopInterval = this.stopInterval.bind(this);\n    this.createStore = this.createStore.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleTime();\n    this.createStore();\n  }\n\n  componentDidUpdate() {\n    this.stopInterval();\n  }\n\n  setAnswer(incorrects, correct) {\n    const { answerClicked, time } = this.state;\n    const incorrectsElements = incorrects.map(\n      (incorrect, index) => (\n        <button\n          type=\"button\"\n          key={ incorrect }\n          data-testid={ `wrong-answer-${index}` }\n          name=\"incorrectAnswer\"\n          className={ answerClicked ? 'incorrect' : null }\n          onClick={ this.handleClick }\n          disabled={ time < 1 }\n        >\n          {this.decode(incorrect)}\n        </button>\n      ),\n    );\n    const correctElement = (\n      <button\n        type=\"button\"\n        data-testid=\"correct-answer\"\n        key={ correct }\n        name=\"correctAnswer\"\n        className={ answerClicked ? 'correct' : null }\n        onClick={ this.handleClick }\n        disabled={ time < 1 }\n      >\n        {this.decode(correct)}\n      </button>\n    );\n    incorrectsElements.splice(2, 0, correctElement);\n    return incorrectsElements;\n  }\n\n  decode(text) {\n    const txt = document.createElement('textarea');\n    txt.innerHTML = text;\n    return txt.value;\n  }\n\n  stopInterval(answered) {\n    const { time } = this.state;\n    if (time < 1 || answered) {\n      clearInterval(this.time);\n    }\n  }\n\n  createStore() {\n    const { name, gravatarEmail } = this.props;\n    const { userPoints, assertions } = this.state;\n    const state = {\n      player: {\n        name,\n        assertions,\n        score: userPoints,\n        gravatarEmail,\n      },\n    };\n    localStorage.setItem('state', JSON.stringify(state));\n  }\n\n  handleClick({ target }) {\n    const { questions } = this.props;\n    const { questionNumber, time, userPoints } = this.state;\n    let difficulty;\n    const hard = 3;\n    let points = userPoints;\n    const assert = 10;\n    switch (questions[questionNumber].difficulty) {\n    case 'hard':\n      difficulty = hard;\n      break;\n    case 'medium':\n      difficulty = 2;\n      break;\n    case 'easy':\n      difficulty = 1;\n      break;\n    default:\n      difficulty = 0;\n    }\n    if (target.name === 'correctAnswer') {\n      points += assert + (time * difficulty);\n      this.setState((previous) => ({\n        assertions: previous.assertions + 1,\n        userPoints: points,\n      }), () => this.createStore());\n    }\n    this.setState({\n      answerClicked: true,\n    });\n    this.stopInterval(true);\n  }\n\n  handleTime() {\n    const magicNumber = 990;\n    this.time = setInterval(() => {\n      this.setState((prev) => ({\n        time: prev.time - 1,\n      }));\n    }, magicNumber);\n  }\n\n  handleNext() {\n    const { questions } = this.props;\n    const { questionNumber } = this.state;\n    const magicNumber = 5;\n    if (questionNumber === questions.length - 1) {\n      this.setState({\n        redirect: true,\n      });\n      return;\n    }\n    if (questionNumber < magicNumber) {\n      this.setState({\n        questionNumber: questionNumber + 1,\n        time: 30,\n        answerClicked: false,\n      }, () => this.handleTime());\n    }\n  }\n\n  render() {\n    const { fetchQuestions, token, loading, questions } = this.props;\n    const { questionNumber, time, answerClicked, redirect } = this.state;\n    if (loading) {\n      fetchQuestions(token);\n      return <h3>Loading</h3>;\n    }\n    if (redirect) return <Redirect to=\"/feedback\" />;\n    this.createStore();\n    return (\n      <div>\n        <h2>Pergunta</h2>\n        <h3>\n          Tempo:\n          { time }\n        </h3>\n        <p data-testid=\"question-category\">\n          Categoria:\n          {questions && this.decode(questions[questionNumber].category)}\n        </p>\n        <p\n          data-testid=\"question-text\"\n        >\n          {questions && this.decode(questions[questionNumber].question)}\n        </p>\n        <div>\n          {questions && this.setAnswer(\n            questions[questionNumber].incorrect_answers,\n            questions[questionNumber].correct_answer,\n          )}\n        </div>\n        { answerClicked && (\n          <button\n            type=\"button\"\n            onClick={ this.handleNext }\n            data-testid=\"btn-next\"\n          >\n            Proxima\n          </button>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchQuestions: (token) => dispatch(setQuestions(token)),\n});\n\nconst mapStateToProps = (state) => ({\n  token: state.token.obj.token,\n  loading: state.questions.loading,\n  questions: state.questions.questions,\n  name: state.setUser.name,\n  gravatarEmail: state.setUser.email,\n});\n\nGameQuestions.propTypes = {\n  fetchQuestions: PropTypes.func,\n  token: PropTypes.string,\n  loading: PropTypes.bool,\n  questions: PropTypes.arrayOf({}),\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameQuestions);\n"]},"metadata":{},"sourceType":"module"}